{
 "cells": [
  {
   "cell_type": "code",
   "source": [
    "from pathlib import Path\n",
    "from torch.utils.data import DataLoader\n",
    "import sys\n",
    "sys.path.append('../')\n",
    "from scLinguist.data_loaders.data_loader import scMultiDataset\n",
    "from scLinguist.model.configuration_hyena import HyenaConfig\n",
    "from scLinguist.model.model import scTrans\n",
    "import importlib, sys\n",
    "sys.modules['model'] = importlib.import_module('scLinguist.model')\n",
    "\n",
    "ENCODER_CKPT = Path(\"../pretrained_model/encoder.ckpt\")\n",
    "DECODER_CKPT = Path(\"../pretrained_model/decoder.ckpt\")\n",
    "FINETUNE_CKPT = Path(\"../pretrained_model/finetune.ckpt\")\n",
    "SAVE_DIR = Path(\"../docs/tutorials/finetune_output\")\n",
    "SAVE_DIR.mkdir(exist_ok=True)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n",
     "is_executing": true
    },
    "ExecuteTime": {
     "end_time": "2025-07-22T08:38:22.958128Z",
     "start_time": "2025-07-22T08:38:19.270501Z"
    }
   },
   "outputs": [],
   "execution_count": 1
  },
  {
   "cell_type": "code",
   "source": [
    "BATCH_SIZE = 4\n",
    "train_ds = scMultiDataset(\n",
    "    data_dir_1=\"../data/train_sample_rna.h5ad\",\n",
    "    data_dir_2=\"../data/train_sample_adt.h5ad\",\n",
    ")\n",
    "valid_ds = scMultiDataset(\n",
    "    data_dir_1=\"../data/valid_sample_rna.h5ad\",\n",
    "    data_dir_2=\"../data/valid_sample_adt.h5ad\",\n",
    ")\n",
    "test_ds = scMultiDataset(\n",
    "    data_dir_1=\"../data/test_sample_rna.h5ad\",\n",
    "    data_dir_2=\"../data/test_sample_adt.h5ad\",\n",
    ")\n",
    "\n",
    "train_dataloader = DataLoader(\n",
    "    train_ds,\n",
    "    batch_size=BATCH_SIZE,\n",
    "    shuffle=True,\n",
    "    num_workers=8,\n",
    "    pin_memory=True,\n",
    "    drop_last=True,\n",
    ")\n",
    "valid_dataloader = DataLoader(\n",
    "    valid_ds,\n",
    "    batch_size=BATCH_SIZE,\n",
    "    shuffle=False,\n",
    "    drop_last=False,\n",
    "    num_workers=8,\n",
    "    pin_memory=True,\n",
    ")\n",
    "test_dataloader = DataLoader(\n",
    "    test_ds,\n",
    "    batch_size=BATCH_SIZE,\n",
    "    shuffle=False,\n",
    "    drop_last=False,\n",
    "    num_workers=0,\n",
    "    pin_memory=True,\n",
    ")\n"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    },
    "ExecuteTime": {
     "end_time": "2025-07-22T08:38:32.651467Z",
     "start_time": "2025-07-22T08:38:23.824339Z"
    }
   },
   "outputs": [],
   "execution_count": 2
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-22T08:38:39.468014Z",
     "start_time": "2025-07-22T08:38:32.800225Z"
    }
   },
   "cell_type": "code",
   "source": [
    "enc_cfg = HyenaConfig(\n",
    "    d_model        = 128,\n",
    "    emb_dim        = 5,\n",
    "    max_seq_len    = 19202,\n",
    "    vocab_len      = 19202,\n",
    "    n_layer        = 1,\n",
    "    output_hidden_states=False,\n",
    ")\n",
    "dec_cfg = HyenaConfig(\n",
    "    d_model        = 128,\n",
    "    emb_dim        = 5,\n",
    "    max_seq_len    = 6427,\n",
    "    vocab_len      = 6427,\n",
    "    n_layer        = 1,\n",
    "    output_hidden_states=False,\n",
    ")\n",
    "model = scTrans.load_from_checkpoint(checkpoint_path=FINETUNE_CKPT)\n",
    "model.encoder_ckpt_path = ENCODER_CKPT\n",
    "model.decoder_ckpt_path = DECODER_CKPT\n",
    "model.mode = \"RNA-protein\""
   ],
   "outputs": [],
   "execution_count": 3
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-22T08:53:34.968528Z",
     "start_time": "2025-07-22T08:38:39.575347Z"
    }
   },
   "cell_type": "code",
   "source": [
    "import pytorch_lightning as pl\n",
    "from pytorch_lightning.callbacks import ModelCheckpoint, EarlyStopping\n",
    "\n",
    "ckpt_cb = ModelCheckpoint(\n",
    "    dirpath      = SAVE_DIR/\"ckpt\",\n",
    "    monitor      = \"valid_loss\",\n",
    "    mode         = \"min\",\n",
    "    save_top_k   = 1,\n",
    "    filename     = \"best-{epoch}-{valid_loss:.4f}\",\n",
    ")\n",
    "early_cb = EarlyStopping(monitor=\"valid_loss\", mode=\"min\", patience=3)\n",
    "\n",
    "trainer = pl.Trainer(\n",
    "    accelerator       = \"gpu\",\n",
    "    devices           = [0],\n",
    "    max_epochs        = 1,\n",
    "    log_every_n_steps = 50,\n",
    "    callbacks         = [ckpt_cb, early_cb],\n",
    ")\n",
    "\n",
    "trainer.fit(model, train_dataloader, valid_dataloader)\n",
    "best_ckpt = ckpt_cb.best_model_path\n"
   ],
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True, used: True\n",
      "TPU available: False, using: 0 TPU cores\n",
      "IPU available: False, using: 0 IPUs\n",
      "LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]\n",
      "\n",
      "  | Name       | Type             | Params\n",
      "------------------------------------------------\n",
      "0 | encoder    | scHeyna_enc      | 313 K \n",
      "1 | decoder    | scHeyna_dec      | 249 K \n",
      "2 | translator | MLPTranslator    | 284 M \n",
      "3 | cos_gene   | CosineSimilarity | 0     \n",
      "4 | cos_cell   | CosineSimilarity | 0     \n",
      "------------------------------------------------\n",
      "285 M     Trainable params\n",
      "0         Non-trainable params\n",
      "285 M     Total params\n",
      "1,141.275 Total estimated model params size (MB)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Validation sanity check: 0it [00:00, ?it/s]"
      ],
      "application/vnd.jupyter.widget-view+json": {
       "version_major": 2,
       "version_minor": 0,
       "model_id": "de3a58eba14742a1ba2a6a2a6347fb47"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Training: 0it [00:00, ?it/s]"
      ],
      "application/vnd.jupyter.widget-view+json": {
       "version_major": 2,
       "version_minor": 0,
       "model_id": "022455c5d9c141cfac9ba5b6257b3a44"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Validating: 0it [00:00, ?it/s]"
      ],
      "application/vnd.jupyter.widget-view+json": {
       "version_major": 2,
       "version_minor": 0,
       "model_id": "eec05b7ca88d496295846c3f466f4e92"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 4
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-22T09:14:51.210513Z",
     "start_time": "2025-07-22T09:14:51.114312Z"
    }
   },
   "cell_type": "code",
   "source": [
    "import scanpy as sc\n",
    "import torch\n",
    "\n",
    "test_adata = sc.read_h5ad(\"../data/test_sample_rna.h5ad\")[:10]\n",
    "rna_tensor = torch.tensor(test_adata.X.todense(), dtype=torch.float32).cuda()\n"
   ],
   "outputs": [],
   "execution_count": 5
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-22T09:14:58.098749Z",
     "start_time": "2025-07-22T09:14:53.075074Z"
    }
   },
   "cell_type": "code",
   "source": [
    "model = scTrans.load_from_checkpoint(best_ckpt)\n",
    "model.encoder_ckpt_path = ENCODER_CKPT\n",
    "model.decoder_ckpt_path = DECODER_CKPT\n",
    "model.mode = \"RNA-protein\"\n",
    "model.eval().cuda()\n",
    "\n",
    "with torch.no_grad():\n",
    "    _, _, protein_pred = model(rna_tensor)\n"
   ],
   "outputs": [],
   "execution_count": 6
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-07-22T09:14:58.448580Z",
     "start_time": "2025-07-22T09:14:58.425673Z"
    }
   },
   "cell_type": "code",
   "source": [
    "target_proteins = [line.strip() for line in open(\"../docs/tutorials/protein_names.txt\")]\n",
    "\n",
    "import pandas as pd\n",
    "prot_map = pd.read_csv(\"../docs/tutorials/protein_index_map.csv\")\n",
    "name_to_idx = dict(zip(prot_map[\"name\"], prot_map[\"index\"]))\n",
    "\n",
    "idx = [name_to_idx[p] for p in target_proteins if p in name_to_idx]\n",
    "\n",
    "pred_df = pd.DataFrame(\n",
    "    protein_pred[:, idx].cpu().numpy(),\n",
    "    columns = target_proteins,\n",
    "    index   = test_adata.obs_names,\n",
    ")\n",
    "pred_df.to_csv(SAVE_DIR/\"predicted_protein_expression.csv\")\n"
   ],
   "outputs": [],
   "execution_count": 7
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
